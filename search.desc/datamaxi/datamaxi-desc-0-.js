searchState.loadedDescShard("datamaxi", 0, "DataMaxi+ Rust SDK\nAPI definitions and related utilities.\nCEX-related data fetcher and data structures.\nDEX-related data fetcher and data structures.\nData models representing API responses and optional …\nRepresents an error that occurs when a request to the API …\nThe client for interacting with the Datamaxi+ API.\nThe configuration for the Datamaxi+ API client.\nA trait that defines the required methods for interacting …\nContains the error value\nThe Error type.\nThe kind of an error.\nRepresents an error that occurs when a request to the API …\nA convenient variant for String.\nContains the success value\nConvenient wrapper around <code>std::Result</code>.\nAdditional methods for <code>Result</code>, for easy interaction with …\nRepresents an error that occurs when a request to the API …\nRepresents an error that occurs when a request to the API …\nThe API key used for authentication.\nReturns the backtrace associated with this error.\nThe base URL for the API.\nIf the <code>Result</code> is an <code>Err</code> then <code>chain_err</code> evaluates the …\nExtends the error chain with a new entry.\nA short description of the error. This method is identical …\nA string describing the error kind.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs an error from a kind, and generates a backtrace.\nSends a GET request to the specified endpoint with …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterates over the error chain.\nReturns the kind of the error.\nCreates a new instance of the implementing type using the …\nCreates a new instance of the <code>Client</code> struct with the …\nCreates a new instance of the implementing type using the …\nConstruct a chained error from another boxed error and a …\nConstructs a chained error from another error and a kind, …\nProvides methods for retrieving CEX candle data and …\nRetrieves a list of supported exchanges for candle data. …\nReturns the argument unchanged.\nRetrieves candle data for a specified exchange and symbol. …\nRetrieves a list of supported candle intervals.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Candle</code> instance with the default base URL.\nCreates a new <code>Candle</code> instance with a custom base URL.\nRetrieves a list of supported symbols for candle data. The …\nProvides methods for retrieving DEX candle data and …\nProvides methods for retrieving DEX trade data and related …\nRetrieves a list of available chains for candle data.\nRetrieves a list of available intervals for trade data.\nRetrieves a list of available exchanges for candle data.\nRetrieves a list of available exchanges for trade data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves candle data for a specified chain, exchange, and …\nRetrieves trade data for a specified chain, exchange, and …\nRetrieves a list of available intervals for candle data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Candle</code> instance with the default base URL.\nCreates a new <code>Trade</code> instance with the default base URL.\nCreates a new <code>Candle</code> instance with a custom base URL.\nCreates a new <code>Trade</code> instance with a custom base URL.\nRetrieves information about available pools, including …\nRetrieves information about available pools, including …\nDetailed information about a candle.\nOptional parameters for a candle request.\nResponse containing candle data.\nOptional parameters for a pools request.\nResponse containing details about pools.\nOptional parameters for a symbols request.\nResponse containing details about symbols.\nDetailed information about a trade.\nOptional parameters for a trade request.\nResponse containing trade data.\nThe base asset of the trading pair.\nThe base asset used in the pool.\nThe quantity of the base asset traded, in base unit.\nThe address of the base token in the pool.\nThe block number in which the trade was recorded.\nSets the chain for the pools query.\nThe chain for the pools query.\nThe blockchain where the pool is located.\nThe closing price of the asset at the end of the time …\nA vector containing detailed information about each candle.\nA vector containing detailed information about each trade.\nSets the exchange for the pools query.\nThe exchange for the pools query.\nThe name of the exchange.\nThe name of the exchange where the pool is available.\nReturns the argument unchanged.\nSets the starting date &amp; time for the candle query.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the starting date for the trade query.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe starting date &amp; time for the candle data.\nThe starting date for the trade query.\nThe starting point of the time frame for the candle data.\nThe starting point of the time frame for the trade data.\nThe highest price of the asset during the time frame.\nAn optional unique identifier for the symbol.\nAn optional unique identifier for the pool.\nSets the interval for the candle query.\nThe interval for the candle data (e.g., 1m, 1h, 1d).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the limit for the number of results returned.\nSets the limit for the number of results returned.\nThe maximum number of items per page in the response.\nThe maximum number of items per page in the response.\nThe maximum number of items per page in the response.\nThe maximum number of items per page in the response.\nThe lowest price of the asset during the time frame.\nThe maker of the trade (the party who placed the order).\nSets the market for the candle query.\nSets the market for the symbols query.\nThe market type (e.g., spot, futures).\nThe market type (e.g., spot, futures).\nThe market type (e.g., spot, futures).\nCreates a new instance of <code>CandleOptions</code> with default …\nCreates a new instance of <code>SymbolsOptions</code> with default …\nCreates a new instance of <code>TradeOptions</code> with default values.\nCreates a new instance of <code>PoolsOptions</code> with default values.\nThe opening price of the asset at the beginning of the …\nSets the page number for the candle query.\nSets the page number for the trade query.\nThe page number for the candle data.\nThe page number for the trade query.\nThe current page number in the paginated response.\nThe current page number in the paginated response.\nThe trading pool where the trade occurred.\nThe unique address of the pool.\nThe price of the trade in the quote asset’s unit.\nThe quote asset of the trading pair.\nThe quote asset used in the pool.\nThe address of the quote token in the pool.\nThe quantity of the quote asset traded, in base unit.\nSets the sort order for the candle query (e.g., “asc” …\nSets the sort order for the trade query (e.g., “asc” …\nThe sorting order for the candle data (e.g., “asc” or …\nThe sorting order for the trade query (e.g., “asc” or …\nThe sorting order for the candle data (e.g., “asc” or …\nThe sorting order for the trade data (e.g., “asc” or …\nThe trading symbol associated with the trade (e.g., …\nThe trading symbol (e.g., BTC-USDT).\nThe timestamp of the candle’s open time.\nThe timestamp of the trade.\nSets the ending date &amp; time for the candle query.\nSets the ending date for the trade query.\nThe ending date &amp; time for the candle data.\nThe ending date for the trade query.\nThe ending point of the time frame for the candle data.\nThe ending point of the time frame for the trade data.\nThe type of trade (e.g., buy or sell).\nThe hash of the transaction related to the trade.\nThe total volume of trades (in the base currency) that …")